{"version":3,"file":"index.js","mappingspGA;;;;;;;;AAAA;;;;;;;;;ACAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA","sources":[".././src/main.js","../../../../../opt/homebrew/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../external node-commonjs \"fs\"","../webpack/bootstrap","../webpack/runtime/compat",".././src/index.js"],"sourcesContent":["const core = require('@actions/core')\nconst github = require('@actions/github')\nconst fs = require('fs')\n\n/**\n * The main function for the action.\n * @returns {Promise<void>} Resolves when the action is complete.\n */\nasync function run() {\n  try {\n    const lintFile = core.getInput('lint-file', { required: true })\n    const pylintResultCode = +core.getInput('pylint-result-code', {\n      required: true\n    })\n    const headSha = core.getInput('head-sha', { required: true })\n    const token = core.getInput('repo-token')\n    const repo_owner = core.getInput('repo-owner')\n    const repo_name = core.getInput('repo-name')\n\n    // read summary file\n    const lintingJson = fs.readFileSync(lintFile, 'utf8')\n    const linting = JSON.parse(lintingJson)\n\n    const annotations = linting.messages.map(result => {\n      return {\n        path: result.path,\n        start_line: result.line,\n        end_line: result.endLine || result.line,\n        annotation_level: toConvention(result.type),\n        message: result.message,\n        start_column: result.column,\n        end_column: result.endColumn || result.column\n      }\n    })\n    const conclusion = pylintResultCode === 0 ? 'success' : 'failure'\n\n    const numAnnotations = annotations.length\n    core.info(`number of annotations: ${numAnnotations}`)\n    let trimmedWarning = ''\n    if (numAnnotations > 50) {\n      core.warning(\n        `Number of annotations is greater than 50, only the first 50 will be displayed.`\n      )\n      annotations = annotations.slice(0, 50)\n      trimmedWarning =\n        '\\n:warning: Pylint annotations have been limited to 50 due to api limitations.'\n    }\n\n    core.info(`conclusion of linting: ${conclusion}`)\n\n    const octokit = github.getOctokit(token)\n\n    let title = 'No issues have been found!'\n    if (conclusion !== 'failure') {\n      title = 'Pylint has some suggestions!'\n    }\n\n    let summary = 'No issues have been found!'\n    if (conclusion !== 'failure') {\n      summary = 'Pylint has some suggestions!'\n    }\n\n    const resp = await octokit.rest.checks.create({\n      owner: repo_owner,\n      repo: repo_name,\n      name: 'pylint',\n      head_sha: headSha,\n      completed_at: new Date().toISOString(),\n      conclusion,\n      status: 'completed',\n      output: {\n        title: title,\n        summary: summary,\n        annotations\n      }\n    })\n    core.debug(`response from checks create: ${resp.status}`)\n    core.setOutput('result', 'Success')\n  } catch (error) {\n    // Fail the workflow run if an error occurs\n    core.setFailed(error.message)\n    core.setOutput('result', 'Failure')\n  }\n}\n\nfunction toConvention(c) {\n  switch (c) {\n    case 'convention':\n      return 'notice'\n    case 'error':\n      return 'failure'\n    case 'warning':\n      return 'warning'\n    default:\n      return 'notice'\n  }\n}\n\nmodule.exports = {\n  run\n}\n",null,"module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","/**\n * The entrypoint for the action.\n */\nconst { run } = require('./main')\n\nrun()\n"],"names":[],"sourceRoot":""}